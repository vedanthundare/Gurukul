"""
generate_lesson_ollama_client.py - Script to generate a lesson using Ollama Python client
"""

import json
import argparse
import re
import ollama
import os

# Force CPU-only mode
os.environ["CUDA_VISIBLE_DEVICES"] = "-1"
os.environ["OLLAMA_HOST"] = "http://localhost:11434"

def generate_lesson(subject, topic):
    """
    Generate a lesson using Ollama Python client
    """
    try:
        # Define the prompt for generating a lesson
        prompt = f"""
        Create a structured lesson on the topic of {topic} within the subject of {subject} in the context of ancient Indian wisdom.
        
        The lesson should include:
        1. A title that captures the essence of the lesson
        2. A relevant Sanskrit shloka or verse
        3. An English translation of the shloka
        4. A detailed explanation of the concept, including its significance in ancient Indian knowledge systems
        5. A practical activity for students to engage with the concept
        6. A reflective question for students to ponder
        
        Format the response as a JSON object with the following structure:
        {{
            "title": "The title of the lesson",
            "shloka": "The Sanskrit shloka or verse",
            "translation": "English translation of the shloka",
            "explanation": "Detailed explanation of the concept",
            "activity": "A practical activity for students",
            "question": "A reflective question for students"
        }}
        
        Ensure that the content is authentic, respectful of the tradition, and educationally valuable.
        """
        
        # Generate the lesson using Ollama
        system_prompt = "You are an expert in ancient Indian wisdom traditions, particularly in Vedic knowledge, Yoga, and traditional Indian mathematics (Ganita)."
        
        # Use tinyllama model which requires less memory
        model = "tinyllama"
        
        print(f"Generating lesson for subject: {subject}, topic: {topic} using Ollama with model: {model}...")
        
        # Generate the response using the Ollama client
        response = ollama.chat(
            model=model,
            messages=[
                {
                    "role": "system",
                    "content": system_prompt
                },
                {
                    "role": "user",
                    "content": prompt
                }
            ]
        )
        
        # Extract the lesson from the response
        lesson_text = response["message"]["content"].strip()
        print(f"Ollama response received. Length: {len(lesson_text)} characters")
        
        # Try to parse the JSON response
        try:
            # Extract JSON from the response (it might be surrounded by markdown code blocks)
            json_match = re.search(r'```json\s*(.*?)\s*```', lesson_text, re.DOTALL)
            if json_match:
                lesson_text = json_match.group(1)
                print("Found JSON in code block")
            else:
                # Try to find JSON object directly
                json_match = re.search(r'({.*})', lesson_text, re.DOTALL)
                if json_match:
                    lesson_text = json_match.group(1)
                    print("Found JSON object directly")
                else:
                    print("Could not find JSON in response")
                    # If we can't find JSON, create a simple lesson
                    lesson = {
                        "title": f"Lesson on {subject}: {topic} (Generated by Ollama)",
                        "shloka": "ॐ सर्वे भवन्तु सुखिनः सर्वे सन्तु निरामयाः। सर्वे भद्राणि पश्यन्तु मा कश्चिद्दुःखभाग्भवेत्॥",
                        "translation": "May all be happy, may all be free from disease, may all see auspiciousness, may none suffer.",
                        "explanation": lesson_text[:500] + "...",
                        "activity": f"Research the relationship between {subject} and {topic} in traditional Indian knowledge systems. Write down three key insights you discover.",
                        "question": f"How does the understanding of {topic} in {subject} differ from modern interpretations?"
                    }
                    return lesson
            
            # Clean the JSON text to handle control characters
            lesson_text = re.sub(r'[\x00-\x1F\x7F-\x9F]', ' ', lesson_text)
            
            try:
                lesson = json.loads(lesson_text)
            except json.JSONDecodeError:
                # Try to fix common JSON issues
                # Replace newlines in strings with spaces
                lesson_text = re.sub(r'("(?:\\.|[^"\\])*")|\s+', lambda m: ' ' if m.group(1) is None else m.group(1), lesson_text)
                # Try again
                try:
                    lesson = json.loads(lesson_text)
                except json.JSONDecodeError:
                    # If still failing, try to parse it manually
                    print("Parsing JSON manually...")
                    
                    # Extract fields using regex
                    title_match = re.search(r'"title"\s*:\s*"([^"]*)"', lesson_text)
                    shloka_match = re.search(r'"shloka"\s*:\s*"([^"]*)"', lesson_text)
                    translation_match = re.search(r'"translation"\s*:\s*"([^"]*)"', lesson_text)
                    explanation_match = re.search(r'"explanation"\s*:\s*"([^"]*)"', lesson_text)
                    activity_match = re.search(r'"activity"\s*:\s*"([^"]*)"', lesson_text)
                    question_match = re.search(r'"question"\s*:\s*"([^"]*)"', lesson_text)
                    
                    lesson = {
                        "title": title_match.group(1) if title_match else f"Lesson on {subject}: {topic}",
                        "shloka": shloka_match.group(1) if shloka_match else "ॐ",
                        "translation": translation_match.group(1) if translation_match else "Om",
                        "explanation": explanation_match.group(1) if explanation_match else lesson_text[:500],
                        "activity": activity_match.group(1) if activity_match else f"Research {subject} and {topic}",
                        "question": question_match.group(1) if question_match else f"How does {topic} relate to {subject}?"
                    }
            
            # Ensure all required fields are present
            required_fields = ["title", "shloka", "translation", "explanation", "activity", "question"]
            for field in required_fields:
                if field not in lesson:
                    lesson[field] = f"Missing {field} in generated lesson"
            
            print(f"Successfully generated lesson: {lesson['title']}")
            
            return lesson
        except Exception as e:
            print(f"Error parsing Ollama response: {str(e)}")
            print("Raw response:")
            print(lesson_text)
            return None
    except Exception as e:
        print(f"Error: {str(e)}")
        return None

def main():
    """
    Main function
    """
    parser = argparse.ArgumentParser(description="Generate a lesson using Ollama")
    parser.add_argument("--subject", required=True, help="Subject of the lesson (e.g., Ved, Ganita, Yoga)")
    parser.add_argument("--topic", required=True, help="Topic of the lesson (e.g., Sound, Mathematics, Meditation)")
    
    args = parser.parse_args()
    
    lesson = generate_lesson(args.subject, args.topic)
    
    if lesson:
        print(json.dumps(lesson, indent=2, ensure_ascii=False))
    else:
        print("Failed to generate lesson")

if __name__ == "__main__":
    main()
